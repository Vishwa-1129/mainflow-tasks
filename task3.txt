SQL joins are used to combine records from two or more tables in a database based on related columns. Here's a description of each type of join:

1. INNER JOIN
Description: Returns records that have matching values in both tables.
syntax:
SELECT columns
FROM table1
INNER JOIN table2
ON table1.common_column = table2.common_column;
Example:
SELECT employees.name, departments.department_name
FROM employees
INNER JOIN departments
ON employees.department_id = departments.department_id;
Result: Only rows with matching values in both tables will be included in the result set.
2. LEFT JOIN (or LEFT OUTER JOIN)
Description: Returns all records from the left table, and the matched records from the right table. The result is NULL from the right side if there is no match.
Syntax:
SELECT columns
FROM table1
LEFT JOIN table2
ON table1.common_column = table2.common_column;
Example:
SELECT employees.name, departments.department_name
FROM employees
LEFT JOIN departments
ON employees.department_id = departments.department_id;
Result: All rows from the left table, and the matched rows from the right table (NULL for non-matching rows from the right table).
3. RIGHT JOIN (or RIGHT OUTER JOIN)
Description: Returns all records from the right table, and the matched records from the left table. The result is NULL from the left side if there is no match.
Syntax:
SELECT columns
FROM table1
RIGHT JOIN table2
ON table1.common_column = table2.common_column;
Example:
SELECT employees.name, departments.department_name
FROM employees
RIGHT JOIN departments
ON employees.department_id = departments.department_id;
Result: All rows from the right table, and the matched rows from the left table (NULL for non-matching rows from the left table).
4. FULL JOIN (or FULL OUTER JOIN)
Description: Returns all records when there is a match in either left or right table. Records without a match in one table will have NULLs in the columns of that table.
Syntax:
SELECT columns
FROM table1
FULL JOIN table2
ON table1.common_column = table2.common_column;
Example:
SELECT employees.name, departments.department_name
FROM employees
FULL JOIN departments
ON employees.department_id = departments.department_id;
Result: All rows from both tables, with NULLs in places where there is no match.
5. CROSS JOIN
Description: Returns the Cartesian product of the two tables, i.e., all possible combinations of rows from both tables.
Syntax:
SELECT columns
FROM table1
CROSS JOIN table2;
Example:
SELECT employees.name, departments.department_name
FROM employees
CROSS JOIN departments;
Result: Every row in the first table is paired with every row in the second table.
